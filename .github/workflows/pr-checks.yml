name: PR Checks

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, feature/#8-fix-windows-workflow ]

jobs:
  quick-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: false
    
    - name: Get Poetry cache dir
      id: poetry-cache
      run: |
        echo "dir=$(poetry config cache-dir)" >> $GITHUB_OUTPUT
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: 🧪 Run tests
      run: |
        echo "🔍 Running pytest..."
        poetry run pytest -v
    
    - name: 🎨 Check formatting
      run: |
        echo "🎨 Checking code formatting..."
        poetry run black --check . || (echo "❌ Code formatting issues found. Run 'black .' to fix." && exit 1)
    
    - name: 📦 Test build
      run: |
        echo "📦 Testing package build..."
        poetry build
        echo "✅ Build completed successfully"
    
    - name: 🔍 Verify package
      run: |
        echo "🔍 Verifying package contents..."
        ls -la dist/
        echo "📁 Source distribution contents:"
        tar -tzf dist/*.tar.gz | head -20
        echo "🐍 Wheel contents:"
        unzip -l dist/*.whl | head -20
    
    - name: ✅ Installation test
      run: |
        echo "✅ Testing package installation..."
        WHEEL_FILE=$(find dist -name "*.whl" | head -1)
        pip install "$WHEEL_FILE"
        python -c "
        import sys
        try:
            import pydddi
            from pydddi import IEntity, IModel, IUseCase, ICrudRepository
            print('🎉 All imports successful!')
            print('✅ PR is ready for merge')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

  summary:
    runs-on: ubuntu-latest
    needs: quick-test
    if: always()
    steps:
    - name: PR Status Summary
      run: |
        if [ "${{ needs.quick-test.result }}" == "success" ]; then
          echo "🎉 All checks passed! This PR is ready to merge."
          echo "✅ Tests: PASSED"
          echo "✅ Build: PASSED" 
          echo "✅ Installation: PASSED"
        else
          echo "❌ Some checks failed. Please review the errors above."
          exit 1
        fi
