name: Windows Debug Test

on:
  push:
    branches: [ feature/#8-fix-windows-workflow ]

jobs:
  windows-debug:
    runs-on: windows-latest
    timeout-minutes: 45
    
    steps:
    - name: üîΩ Checkout code
      uses: actions/checkout@v4
    
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    
    - name: üîß Update pip and install Poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry==1.8.3
        poetry --version
        echo "Poetry installation completed"
      shell: pwsh
    
    - name: üõ†Ô∏è Configure Poetry for Windows
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        poetry config --list
      shell: pwsh
    
    - name: üìã Debug environment
      run: |
        echo "=== Python Information ==="
        python --version
        python -c "import sys; print('Python executable:', sys.executable)"
        echo ""
        echo "=== Poetry Information ==="
        poetry --version
        poetry env info
        echo ""
        echo "=== Current Directory ==="
        Get-Location
        echo ""
        echo "=== Files in current directory ==="
        Get-ChildItem
      shell: pwsh
    
    - name: üîß Install dependencies with verbose output
      run: |
        echo "Installing dependencies..."
        poetry install --no-interaction --verbose
        echo "Installation completed"
      shell: pwsh
    
    - name: üß™ Run tests with detailed output
      run: |
        echo "Running tests..."
        poetry run python -m pytest -v --tb=short
        echo "Tests completed"
      shell: pwsh
    
    - name: üì¶ Build package with debug
      run: |
        echo "Building package..."
        poetry build --verbose
        echo ""
        echo "=== Build artifacts ==="
        Get-ChildItem dist\ -Recurse
      shell: pwsh
    
    - name: ‚úÖ Test installation with full paths
      run: |
        echo "=== Testing package installation ==="
        $distPath = Resolve-Path "dist"
        echo "Distribution path: $distPath"
        
        $wheelFiles = Get-ChildItem "$distPath\*.whl"
        echo "Found wheel files:"
        $wheelFiles | ForEach-Object { echo "  - $($_.FullName)" }
        
        if ($wheelFiles.Count -gt 0) {
            $wheelFile = $wheelFiles[0]
            echo "Installing wheel: $($wheelFile.FullName)"
            pip install "$($wheelFile.FullName)"
            
            echo "Testing import..."
            python -c "
            print('=== Import Test ===')
            try:
                import pydddi
                print('‚úÖ pydddi import: SUCCESS')
                
                from pydddi import IEntity, IModel, IUseCase, ICrudRepository
                print('‚úÖ Interface imports: SUCCESS')
                
                print('üéâ All Windows imports successful!')
                print('üì¶ Package location:', pydddi.__file__ if hasattr(pydddi, '__file__') else 'unknown')
            except Exception as e:
                print('‚ùå Import failed:', str(e))
                import traceback
                traceback.print_exc()
                exit(1)
            "
        } else {
            echo "‚ùå No wheel files found!"
            exit 1
        }
      shell: pwsh
    
    - name: üìä Final summary
      run: |
        echo "üéâ Windows debug test completed successfully!"
        echo "‚úÖ Poetry: OK"
        echo "‚úÖ Dependencies: OK" 
        echo "‚úÖ Tests: OK"
        echo "‚úÖ Build: OK"
        echo "‚úÖ Installation: OK"
        echo "‚úÖ Imports: OK"
      shell: pwsh
